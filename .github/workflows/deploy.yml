name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Backend 이미지 빌드 및 푸시
      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Frontend 이미지 빌드 및 푸시
      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 프로젝트 디렉토리로 이동
            cd ~/pharmacy-project
            
            # 최신 코드 가져오기
            git pull origin main
            
            # .env.prod 파일 생성
            cd infra
            cat > .env.prod << EOF
            RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            ALLOWED_ORIGINS=http://${{ secrets.EC2_HOST }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            BACKEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-backend:latest
            FRONTEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-frontend:latest
            EOF
            
            # 기존 컨테이너 중지 및 제거
            docker-compose -f docker-compose.prod.yml down
            
            # Docker 로그인
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # 최신 이미지 강제로 pull (캐시 무시)
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-backend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-frontend:latest
            
            # 새로운 컨테이너 시작
            docker-compose -f docker-compose.prod.yml up -d
            
            # 사용하지 않는 이미지 정리
            docker image prune -af
            
            # 컨테이너 상태 확인
            docker-compose -f docker-compose.prod.yml ps