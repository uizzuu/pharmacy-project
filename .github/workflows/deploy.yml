name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-${{ matrix.service }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-${{ matrix.service }}:latest
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/pharmacy-project/infra

            echo "=== Docker 로그인 ==="
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "=== .env.prod 파일 생성 ==="
            cat > .env.prod << 'EOF'
            SPRING_PROFILES_ACTIVE=prod
            RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            
             # 🛑 수정된 부분: CORS 허용 도메인 추가 🛑
            ALLOWED_ORIGINS=http://localhost:3000,http://${{ secrets.EC2_HOST }},http://${{ secrets.EC2_HOST }}:8080
            
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            BACKEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-backend:latest
            FRONTEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pharmacy-frontend:latest
            EOF

            echo "=== 최신 이미지 pull 및 컨테이너 일괄 교체 (단일 명령어) ==="
            # 1. pull: 최신 이미지를 먼저 다운로드
            docker-compose --env-file .env.prod -f docker-compose.prod.yml pull
            
            # 2. up: 모든 서비스(backend, frontend)를 한 번에 강제 재시작 및 교체
            # 이 명령 하나로 이전의 pull, sleep, 두 번의 up 명령을 대체합니다.
            docker-compose --env-file .env.prod -f docker-compose.prod.yml up -d --force-recreate

            echo "=== 배포 및 컨테이너 상태 확인 ==="
            docker-compose --env-file .env.prod -f docker-compose.prod.yml ps

            echo "=== Backend 로그 (최근 30줄) ==="
            docker-compose --env-file .env.prod -f docker-compose.prod.yml logs --tail=30 backend

            echo "=== Frontend 로그 (최근 30줄) ==="
            docker-compose --env-file .env.prod -f docker-compose.prod.yml logs --tail=30 frontend

            echo "=== 사용하지 않는 이미지 정리 ==="
            docker image prune -af

            echo "=== 배포 완료 ==="